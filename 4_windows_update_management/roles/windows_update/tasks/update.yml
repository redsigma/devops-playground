###############################################################################
- name: Configuring parameters
  block:
    - name: Collecting operating system info
      win_shell: "$env:SystemDrive"
      register: system_drive

    - name: Configuring parameters
      set_fact:
        logs_dir: "{{ system_drive.stdout | trim }}/Windows/Temp"

    - name: Validating logs directory
      ansible.windows.win_file:
        path: "{{ logs_dir }}"
        state: directory

  rescue:
    - name: Failed to create windows update log folder
      fail:
        msg: "Unable to create folder {{ logs_dir }}"


###############################################################################
- name: Cleanup windows update logs
  win_file:
    path: "{{ logs_dir }}/win_updates.log"
    state: absent
  ignore_errors: yes


###############################################################################
- name: Check if a reboot is pending
  win_shell: |
    $pending = 0

    # Component-Based Servicing
    if (Test-Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending") {
        $pending = 1
    }

    # Windows Update Auto Update
    if (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired") {
        $pending = 1
    }

    return $pending
  register: reboot_check_result
  changed_when: false


###############################################################################
- name: Fail early if reboot is pending
  fail:
    msg: "A system reboot is pending. Please reboot."
  when: reboot_check_result.stdout | trim == "1"


###############################################################################
- name: Install updates (no reboot)
  win_updates:
    category_names:
      - SecurityUpdates
      # - CriticalUpdates
      # - Updates
      # - UpdateRollups
      # - FeaturePacks
      # - Drivers
      # - DefinitionUpdates
      # - MicrosoftDefenderAntivirus
      # - Upgrades
      # - Application
      # - Connectors
      # - Guidance
      # - ServicePacks
      # - Tools
    state: installed
    skip_optional: yes
    reboot: false
    reject_list:
      - '.*Preview.*'
    log_path: "{{ logs_dir }}/win_updates.log"
  register: update_result
  ignore_errors: yes
  retries: "{{ max_windows_update_retries | default(3) }}"
  delay: 60
  until: >
    update_result.failed_update_count == 0 and
    update_result.reboot_required == false and
    update_result.found_update_count == 0


###############################################################################
# @note: useful if max retries exceeded
#
- name: Verify any pending updates
  ansible.builtin.fail:
    msg: >
      Windows updates did not complete after {{ max_retries | default(3) }} attempts.
      (Remaining issues:
       failed_updates={{ update_result.failed_update_count }},
       reboot_required={{ update_result.reboot_required }},
       updates_pending={{ update_result.found_update_count }})
  when: >
    update_result.failed_update_count|int > 0 or
    update_result.reboot_required or
    update_result.found_update_count|int > 0


###############################################################################
- name: Verify important KB updates are installed
  ansible.windows.win_shell: |
    $missing = @()
    foreach ($KB in (ConvertFrom-Json '{{ important_updates | to_json }}')) {
      if (-not (Get-HotFix -Id $KB -ErrorAction SilentlyContinue)) {
        $missing += $KB
      }
    }
    if ($missing) {
      Write-Host "Missing update KBs: $($missing -join ', ')"
      Exit 1
    } else {
      Write-Host "All important updats are installed."
    }
  register: kb_check
  changed_when: false
  failed_when: kb_check.rc != 0
  when: important_updates is defined


###############################################################################
- name: Show updates
  vars:
    msg: |
        {% for k in update_result.updates %}
        {{ 'Needed' if ansible_check_mode else 'Installed' }}: {{ update_result.updates[k].title }}
        {% endfor %}

        Skipped Updates:

        {% for kk in update_result.filtered_updates %}
        {{ update_result.filtered_updates[kk].title }} ({{ update_result.filtered_updates[kk].filtered_reasons | join(', ') }})
        {% endfor %}

        {% if update_result.reboot_required %}
        ‚ùå Reboot required
        {% endif %}
  debug:
    msg: "{{ msg.split('\n') | select('match', '\\S') | list }}"

